#!/bin/bash
# vim600: foldmethod=marker
# 
# Debian build tool for Voikko components by Teemu Likonen <tlikonen@iki.fi>
#
# This script is public domain.

component=$1
action=$2
target="$3"
svnroot="https://voikko.svn.sourceforge.net/svnroot/voikko"

check_package() { #{{{1
	local all_packages=$*
	local package not_installed=""
	for package in $all_packages
	do
		if ! dpkg --list $package 2>/dev/null | grep ^ii >/dev/null; then
			not_installed="$not_installed $package"
		fi
	done
	if [ "$not_installed" ]; then
		echo "ERROR: You must have following packages installed:$not_installed"
		exit 1
	fi
	}

get_svn() { #{{{1
	local svn_dir="$1"
	local base_dir="$2"
	local svn_revision=$3
	svn co --revision ${svn_revision:-HEAD} "$svnroot/$svn_dir" "$base_dir" || exit 1
	}

get_url() { #{{{1 
	local url="$1"
	if [ ! $url ]; then echo "ERROR: URL is missing"; exit 1; fi
	wget "$url" || exit 1
	}

uncompress_archive() { #{{{1
	local component=$1
	local filename="$2"
	if [ ! -f "$filename" ]; then
		echo "ERROR: File not found: $filename"
		exit 1
	fi
	if file "$filename" | grep 'gzip compressed data' >/dev/null; then
		tar --extract --verbose --gzip --file "$filename" --show-transformed --transform=s,^[^/]*,$component, || exit 1
	elif file "$filename" | grep 'bzip2 compressed data' >/dev/null; then
		check_package bzip2
		tar --extract --verbose --bzip2 --file "$filename" --show-transformed --transform=s,^[^/]*,$component, || exit 1
	elif file "$filename" | grep 'tar archive' >/dev/null; then
		tar --extract --verbose --file "$filename" --show-transformed --transform=s,^[^/]*,$component, || exit 1
	else
		echo "ERROR: Unknown archive format in file $filename"
		exit 1
	fi
	}

update_changelog() { #{{{1
	local svn_revision svn_last_changed_deb svn_last_changed_source package version changelognew
	svn_revision=$(svn info debian 2>/dev/null | awk '/^Revision:/ {print $2}')
	svn_last_changed_source=$(svn info 2>/dev/null | awk '/^Last Changed Date:/ {printf "%s %s %s\n",$4,$5,$6}')
	#svn_last_changed_debian=$(svn info debian 2>/dev/null | awk '/^Last Changed Date:/ {printf "%s %s %s\n",$4,$5,$6}')
	package=$(dpkg-parsechangelog | awk '/^Source:/ {print $2}')
	version=$(dpkg-parsechangelog | awk '/^Version:/ {print $2}')
	version=${version%-*}
	version=${version%+svn*}
	changelognew=debian/changelog.new
	echo -e "$package (${version}+svn${svn_revision}-1) unstable; urgency=low\n" >$changelognew
	echo -e "  * Upstream development snapshot" >>$changelognew
	echo -e "    Source tree last changed: ${svn_last_changed_source:-(no info)}\n" >>$changelognew
	echo -e " -- ${DEBFULLNAME:-Nobody} <${DEBEMAIL:-nobody@invalid}>  $(date -R)\n" >>$changelognew
	cat debian/changelog >>$changelognew
	mv $changelognew debian/changelog
	}

build_deb() { #{{{1
	dpkg-checkbuilddeps || exit 1
	dpkg-buildpackage -rfakeroot -b -uc
	}

suomimalaga() { #{{{1
	local component=suomimalaga
	local action="$1"
	local target="$2"
	local svn_revision=""
	cd $component || exit 1
	if [ $action = "svn" ]; then
		svn_revision=$target
	fi
	get_svn trunk/debian/suomi-malaga+debian debian $svn_revision
	update_changelog
	build_deb
	echo; dpkg-parsechangelog
	echo; svn revert debian/changelog
	}

tmispell() { #{{{1
	local component=tmispell
	local action="$1"
	local target="$2"
	local svn_revision=""
	cd $component || exit 1
	if [ $action = "svn" ]; then
		svn_revision=$target
		check_package libtool automake
		sh autogen.sh
	fi
	get_svn trunk/debian/tmispell-voikko+debian debian $svn_revision
	update_changelog
	build_deb
	echo; dpkg-parsechangelog
	echo; svn revert debian/changelog
	}

ooovoikko() { #{{{1
	local component=ooovoikko
	local action="$1"
	local target="$2"
	local svn_revision=""
	cd $component || exit 1
	if [ $action = "svn" ]; then
		svn_revision=$target
	fi
	get_svn trunk/debian/openoffice.org-voikko+debian debian $svn_revision
	update_changelog
	build_deb
	echo; dpkg-parsechangelog
	echo; svn revert debian/changelog
	}

libvoikko() { #{{{1
	local component=libvoikko
	local action="$1"
	local target="$2"
	local svn_revision=""
	cd $component || exit 1
	if [ $action = "svn" ]; then
		svn_revision=$target
		check_package libtool automake
		sh autogen.sh
	fi
	get_svn trunk/debian/libvoikko+debian debian $svn_revision
	update_changelog
	build_deb
	echo; dpkg-parsechangelog
	echo; svn revert debian/changelog
	}

print_usage() { #{{{1
	local name=$(basename $0)
	cat <<EOF
$name - Debian build tool for Voikko components

Description: This tool obtains Voikko's source code from user defined location
and creates a ready-to-install .deb package from it. The .deb package as well
as building directory is created under the current directory.

Usage: $name <component> <source>

  <component> = suomimalaga | libvoikko | ooovoikko | tmispell
  <source>    = svn [revision] | file <filename> | url <URL>

Examples:

  Download and build current SVN revision of suomi-malaga (voikko-fi):
  $ $name suomimalaga svn

  Download and build libvoikko's SVN revision 1372:
  $ $name libvoikko svn 1372

  Download and build libvoikko's SVN revision at given date and time:
  $ $name libvoikko svn {20070430T1830}

  Build openoffice.org-voikko from given .tar.gz archive (gzip or bzip2
  compressed tar archives are supported):
  $ $name ooovoikko file openoffice.org-voikko-2.0.tar.gz

  Download and build tmispell-voikko from given URL:
  $ $name tmispell url http://downloads.sourceforge.net/voikko/tmispell-voikko-0.6.1.tar.gz

EOF
	}

#{{{1 Parse command line parameters
case $component in
	libvoikko|ooovoikko|tmispell|suomimalaga)
		check_package build-essential fakeroot subversion
		case $action in
			url)
				get_url "$target"
				uncompress_archive $component "$(basename $target)"
				$component $action $target
				;;
			file)
				uncompress_archive $component "$target"
				$component $action $target
				;;
			svn)
				get_svn trunk/$component $component $target
				$component $action $target
				;;
			*)
				echo "ERROR: Incorrent source"
				print_usage
				exit 1
				;;
		esac
		;;
	*)
		print_usage
		exit 1
		;;
esac
